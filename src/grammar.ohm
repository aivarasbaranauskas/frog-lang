Frog {
    //start of all parsing
    Expr = IfExpr | ForExpr | DefFun | DefVar | AssignExpr | Block | TermExpr

    // a terminal expression: function call or literal or symbol
    TermExpr = LtExpr | LteExpr | GtExpr | GteExpr | EqExpr | NeqExpr | AddExp

    EqExpr  = TermExpr "==" TermExpr
    NeqExpr = TermExpr "!=" TermExpr
    LtExpr  = TermExpr "<"  TermExpr
    LteExpr = TermExpr "<=" TermExpr
    GtExpr  = TermExpr ">"  TermExpr
    GteExpr = TermExpr ">=" TermExpr

    AddExp
        = AddExp "+" MulExp  -- plus
        | AddExp "-" MulExp  -- minus
        | MulExp

    MulExp
        = MulExp "*" PriExp  -- times
        | MulExp "/" PriExp  -- divide
        | PriExp

    PriExp
        = "(" TermExpr ")"  -- paren
        | "-" PriExp   -- neg
        | FunCall
        | lit
        | ident

    ForExpr 
        = "for" "(" ident "->" TermExpr "to" TermExpr ")" Block     -- to
        | "for" "(" ident "->" TermExpr "downto" TermExpr ")" Block -- downto

    // assignment
    AssignExpr = ident "->" TermExpr

    //grouping and conditions
    Block = "{" Expr* "}"
    IfExpr    = "if" "(" TermExpr ")" Block ("else" Block)?

    //function calls and variables
    FunCall = ident "(" Arguments ")"
    Arguments = ListOf<Expr, ",">
    DefVar  = ident "::" Type
    DefFun  = "func" ident "(" Parameters ")" "::" Type Block
    Parameters = ListOf<DefVar, ",">

    //variable types
    Type = "int" | "string" | "bool"

    //various literals
    lit = bool | int | str
    int = digit+
    qq = "\""
    str = qq (~qq any)+ qq
    bool = "true" | "false"

    //definition of a symbol
    ident = letter (letter|digit)*

    // override space to include slash slash comments
    // real version needs to support various unicode whitespace forms
    space := "\t" | " " | "\n" | comment
    comment = "//" (~"\n" any)*
}